{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gulsi\\\\Desktop\\\\NodeReact\\\\React Native\\\\notes-app\\\\screens\\\\TakeImageScreen.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Permissions from 'expo-permissions';\nimport Colors from \"../constants/Colors\";\n\nvar TakeImageScreen = function TakeImageScreen(props) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickedImage = _useState2[0],\n      setPickedImage = _useState2[1];\n\n  var verifyPermissions = function verifyPermissions() {\n    var result;\n    return _regeneratorRuntime.async(function verifyPermissions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA, Permissions.CAMERA_ROLL));\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result.status !== 'granted')) {\n              _context.next = 6;\n              break;\n            }\n\n            Alert.alert('Insufficient permissions!', 'You need to grant camera permissions to use this app.', [{\n              text: 'Okay'\n            }]);\n            return _context.abrupt(\"return\", false);\n\n          case 6:\n            return _context.abrupt(\"return\", true);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var takeImageHandler = function takeImageHandler() {\n    var hasPermission, image;\n    return _regeneratorRuntime.async(function takeImageHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(verifyPermissions());\n\n          case 2:\n            hasPermission = _context2.sent;\n\n            if (hasPermission) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              allowsEditing: true,\n              aspect: [16, 16],\n              quality: 0.5\n            }));\n\n          case 7:\n            image = _context2.sent;\n            setPickedImage(image.uri);\n            props.navigation.navigate('Start');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.imagePicker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.imagePreview,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, !pickedImage ? React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }\n  }, \"No image picked yet.\") : React.createElement(Image, {\n    style: styles.image,\n    source: {\n      uri: pickedImage\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  })), React.createElement(Button, {\n    title: \"Take Image\",\n    color: Colors.primay,\n    onPress: takeImageHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  imagePicker: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n    marginBottom: 15\n  },\n  imagePreview: {\n    width: '100%',\n    height: '50%',\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#ccc',\n    borderWidth: 3\n  },\n  image: {\n    width: '100%',\n    height: '100%'\n  }\n});\nexport default TakeImageScreen;","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/notes-app/screens/TakeImageScreen.js"],"names":["React","useState","ImagePicker","Permissions","Colors","TakeImageScreen","props","pickedImage","setPickedImage","verifyPermissions","askAsync","CAMERA","CAMERA_ROLL","result","status","Alert","alert","text","takeImageHandler","hasPermission","launchCameraAsync","allowsEditing","aspect","quality","image","uri","navigation","navigate","styles","imagePicker","imagePreview","primay","StyleSheet","create","alignItems","flex","justifyContent","marginBottom","width","height","borderColor","borderWidth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEA,OAAOC,MAAP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA,kBACSL,QAAQ,EADjB;AAAA;AAAA,MACtBM,WADsB;AAAA,MACTC,cADS;;AAG7B,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACDN,WAAW,CAACO,QAAZ,CAAqBP,WAAW,CAACQ,MAAjC,EAAyCR,WAAW,CAACS,WAArD,CADC;;AAAA;AAChBC,YAAAA,MADgB;;AAAA,kBAEnBA,MAAM,CAACC,MAAP,KAAkB,SAFC;AAAA;AAAA;AAAA;;AAGlBC,YAAAA,KAAK,CAACC,KAAN,CACI,2BADJ,EAEI,uDAFJ,EAGI,CAAC;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAD,CAHJ;AAHkB,6CAQX,KARW;;AAAA;AAAA,6CAUf,IAVe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAaA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOT,iBAAiB,EADxB;;AAAA;AACfU,YAAAA,aADe;;AAAA,gBAEjBA,aAFiB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAKDjB,WAAW,CAACkB,iBAAZ,CAA8B;AAC9CC,cAAAA,aAAa,EAAE,IAD+B;AAE9CC,cAAAA,MAAM,EAAE,CAAC,EAAD,EAAI,EAAJ,CAFsC;AAG9CC,cAAAA,OAAO,EAAE;AAHqC,aAA9B,CALC;;AAAA;AAKfC,YAAAA,KALe;AAWrBhB,YAAAA,cAAc,CAACgB,KAAK,CAACC,GAAP,CAAd;AACAnB,YAAAA,KAAK,CAACoB,UAAN,CAAiBC,QAAjB,CAA0B,OAA1B;;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAgBA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACvB,WAAD,GACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADH,GAGG,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEqB,MAAM,CAACJ,KAArB;AAA4B,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAClB;AAAN,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,CADJ,EAQI,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,KAAK,EAAEH,MAAM,CAAC2B,MAFhB;AAGE,IAAA,OAAO,EAAEb,gBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADF;AAgBH,CAhDD;;AAkDA,IAAMU,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,WAAW,EAAE;AACTK,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,YAAY,EAAE;AAJL,GADgB;AAO3BP,EAAAA,YAAY,EAAE;AACZQ,IAAAA,KAAK,EAAE,MADK;AAEZC,IAAAA,MAAM,EAAE,KAFI;AAGZF,IAAAA,YAAY,EAAE,EAHF;AAIZD,IAAAA,cAAc,EAAE,QAJJ;AAKZF,IAAAA,UAAU,EAAE,QALA;AAMZM,IAAAA,WAAW,EAAE,MAND;AAOZC,IAAAA,WAAW,EAAE;AAPD,GAPa;AAgB3BjB,EAAAA,KAAK,EAAE;AACLc,IAAAA,KAAK,EAAE,MADF;AAELC,IAAAA,MAAM,EAAE;AAFH;AAhBoB,CAAlB,CAAf;AAsBA,eAAelC,eAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, Image, StyleSheet, Alert, Button } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nimport Colors from '../constants/Colors';\r\n\r\nconst TakeImageScreen = props => {\r\n    const [pickedImage, setPickedImage] = useState();\r\n\r\n    const verifyPermissions = async () => {\r\n        const result = await Permissions.askAsync(Permissions.CAMERA, Permissions.CAMERA_ROLL);\r\n        if(result.status !== 'granted') {\r\n            Alert.alert(\r\n                'Insufficient permissions!',\r\n                'You need to grant camera permissions to use this app.',\r\n                [{ text: 'Okay' }]\r\n            );\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const takeImageHandler = async () => {\r\n        const hasPermission = await verifyPermissions();\r\n        if(!hasPermission) {\r\n            return;\r\n        }\r\n        const image = await ImagePicker.launchCameraAsync({\r\n            allowsEditing: true,\r\n            aspect: [16,16],\r\n            quality: 0.5\r\n        });\r\n\r\n        setPickedImage(image.uri);\r\n        props.navigation.navigate('Start');\r\n    };\r\n\r\n\r\n    return (\r\n      <View style={styles.imagePicker} >\r\n          <View style={styles.imagePreview} >\r\n              {!pickedImage ? (\r\n                  <Text>No image picked yet.</Text>\r\n              ) : (\r\n                  <Image style={styles.image} source={{ uri:pickedImage }} />\r\n              )}\r\n          </View>\r\n          <Button\r\n            title='Take Image'\r\n            color={Colors.primay}\r\n            onPress={takeImageHandler}\r\n          />\r\n      </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    imagePicker: {\r\n        alignItems: 'center',\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        marginBottom: 15\r\n      },\r\n      imagePreview: {\r\n        width: '100%',\r\n        height: '50%',\r\n        marginBottom: 10,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderColor: '#ccc',\r\n        borderWidth: 3\r\n      },\r\n      image: {\r\n        width: '100%',\r\n        height: '100%'\r\n      }\r\n});\r\n\r\nexport default TakeImageScreen;\r\n"]},"metadata":{},"sourceType":"module"}