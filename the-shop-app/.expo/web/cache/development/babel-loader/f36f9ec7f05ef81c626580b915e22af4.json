{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var SIGNUP = 'SIGNUP';\nexport var LOGIN = 'LOGIN';\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong';\n\n            if (errorId === 'EMAIL_EXISTS') {\n              message = 'This email exists already';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.Json());\n\n          case 13:\n            resData = _context.sent;\n            dispatch({\n              type: SIGNUP\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong';\n\n            if (errorId === 'EMAIL_NOT_FOUND') {\n              message = 'This email could not be found';\n            } else if (errorId === 'INVALID_PASSWORD') {\n              message = 'This password in not valid';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(response.Json());\n\n          case 13:\n            resData = _context2.sent;\n            dispatch({\n              type: LOGIN\n            });\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/store/actions/auth.js"],"names":["SIGNUP","LOGIN","signup","email","password","dispatch","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","Json","resData","type","login"],"mappings":";AAAA,OAAO,IAAMA,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACvC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBC,KAAK,CACxB,uGADwB,EAExB;AACIC,cAAAA,MAAM,EAAE,MADZ;AAEIC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFb;AAKIC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,gBAAAA,KAAK,EAAEA,KADU;AAEjBC,gBAAAA,QAAQ,EAAEA,QAFO;AAGjBQ,gBAAAA,iBAAiB,EAAE;AAHF,eAAf;AALV,aAFwB,CADzB;;AAAA;AACGC,YAAAA,QADH;;AAAA,gBAgBCA,QAAQ,CAACC,EAhBV;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAiB4BD,QAAQ,CAACE,IAAT,EAjB5B;;AAAA;AAiBOC,YAAAA,YAjBP;AAkBOC,YAAAA,OAlBP,GAkBiBD,YAAY,CAACE,KAAb,CAAmBC,OAlBpC;AAmBKA,YAAAA,OAnBL,GAmBe,sBAnBf;;AAoBC,gBAAGF,OAAO,KAAK,cAAf,EAA+B;AAC3BE,cAAAA,OAAO,GAAG,2BAAV;AACH;;AAtBF,kBAuBO,IAAIC,KAAJ,CAAWD,OAAX,CAvBP;;AAAA;AAAA;AAAA,6CAyBmBN,QAAQ,CAACQ,IAAT,EAzBnB;;AAAA;AAyBGC,YAAAA,OAzBH;AA0BHjB,YAAAA,QAAQ,CAAC;AAAEkB,cAAAA,IAAI,EAAEvB;AAAR,aAAD,CAAR;;AA1BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA4BH,CA7BM;AA+BP,OAAO,IAAMwB,KAAK,GAAG,SAARA,KAAQ,CAACrB,KAAD,EAAQC,QAAR,EAAqB;AACtC,SAAO,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBC,KAAK,CACxB,mHADwB,EAExB;AACIC,cAAAA,MAAM,EAAE,MADZ;AAEIC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFb;AAKIC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,gBAAAA,KAAK,EAAEA,KADU;AAEjBC,gBAAAA,QAAQ,EAAEA,QAFO;AAGjBQ,gBAAAA,iBAAiB,EAAE;AAHF,eAAf;AALV,aAFwB,CADzB;;AAAA;AACGC,YAAAA,QADH;;AAAA,gBAgBKA,QAAQ,CAACC,EAhBd;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAiBgCD,QAAQ,CAACE,IAAT,EAjBhC;;AAAA;AAiBWC,YAAAA,YAjBX;AAkBWC,YAAAA,OAlBX,GAkBqBD,YAAY,CAACE,KAAb,CAAmBC,OAlBxC;AAmBSA,YAAAA,OAnBT,GAmBmB,sBAnBnB;;AAoBK,gBAAGF,OAAO,KAAK,iBAAf,EAAkC;AAC9BE,cAAAA,OAAO,GAAG,+BAAV;AACH,aAFD,MAEO,IAAIF,OAAO,KAAK,kBAAhB,EAAoC;AACvCE,cAAAA,OAAO,GAAG,4BAAV;AACH;;AAxBN,kBAyBW,IAAIC,KAAJ,CAAWD,OAAX,CAzBX;;AAAA;AAAA;AAAA,6CA2BmBN,QAAQ,CAACQ,IAAT,EA3BnB;;AAAA;AA2BGC,YAAAA,OA3BH;AA4BHjB,YAAAA,QAAQ,CAAC;AAAEkB,cAAAA,IAAI,EAAEtB;AAAR,aAAD,CAAR;;AA5BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA8BH,CA/BM","sourcesContent":["export const SIGNUP = 'SIGNUP';\r\nexport const LOGIN = 'LOGIN';\r\n\r\nexport const signup = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc',\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                })\r\n            }\r\n            );\r\n        \r\n        if(!response.ok) {\r\n            const errorResData = await response.json();\r\n            const errorId = errorResData.error.message;\r\n            let message = 'Something went wrong';\r\n            if(errorId === 'EMAIL_EXISTS') {\r\n                message = 'This email exists already';\r\n            }\r\n            throw new Error (message);\r\n        }\r\n        const resData = await response.Json();\r\n        dispatch({ type: SIGNUP });\r\n    };\r\n};\r\n\r\nexport const login = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc',\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                })\r\n            }\r\n            );\r\n        \r\n            if(!response.ok) {\r\n                const errorResData = await response.json();\r\n                const errorId = errorResData.error.message;\r\n                let message = 'Something went wrong';\r\n                if(errorId === 'EMAIL_NOT_FOUND') {\r\n                    message = 'This email could not be found';\r\n                } else if (errorId === 'INVALID_PASSWORD') {\r\n                    message = 'This password in not valid';\r\n                }\r\n                throw new Error (message);\r\n            }\r\n        const resData = await response.Json();\r\n        dispatch({ type: LOGIN });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}