{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gulsi\\\\Desktop\\\\NodeReact\\\\React Native\\\\the-shop-app\\\\screens\\\\shop\\\\CartScreen.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport CartItem from \"../../components/shop/CartItem\";\nimport * as cartActions from \"../../store/actions/cart\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport Card from \"../../components/UI/Card\";\nimport Colors from \"../../constants/Colors\";\n\nvar CartScreen = function CartScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var cartTotalAmount = useSelector(function (state) {\n    return state.cart.totalAmount;\n  });\n  var cartItems = useSelector(function (state) {\n    var transformedCartItems = [];\n\n    for (var key in state.cart.items) {\n      transformedCartItems.push({\n        productId: key,\n        productTitle: state.cart.items[key].productTitle,\n        productPrice: state.cart.items[key].productPrice,\n        quantity: state.cart.items[key].quantity,\n        sum: state.cart.items[key].sum\n      });\n    }\n\n    return transformedCartItems.sort(function (a, b) {\n      return a.productId > b.productId ? 1 : -1;\n    });\n  });\n  var dispatch = useDispatch();\n\n  var sendOrderHandler = function sendOrderHandler() {\n    return _regeneratorRuntime.async(function sendOrderHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(ordersActions.addOrder(cartItems, cartTotalAmount)));\n\n          case 3:\n            setIsLoading(false);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, React.createElement(Card, {\n    style: styles.summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.summaryText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, \"Total: \", React.createElement(Text, {\n    style: styles.amount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 28\n    }\n  }, \"$\", cartTotalAmount.toFixed(2))), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: Colors.primary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 30\n    }\n  }) : React.createElement(Button, {\n    style: {\n      color: Colors.accent\n    },\n    title: \"Order Now\",\n    disabled: cartItems.length === 0,\n    onPress: function onPress() {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 90\n    }\n  })), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: cartItems,\n    keyExtractor: function keyExtractor(item) {\n      return item.productId;\n    },\n    renderItem: function renderItem(itemData) {\n      return React.createElement(CartItem, {\n        quantity: itemData.item.quantity,\n        title: itemData.item.productTitle,\n        amount: itemData.item.sum,\n        deletable: true,\n        onRemove: function onRemove() {\n          dispatch(cartActions.removeFromCart(itemData.item.productId));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })));\n};\n\nCartScreen.navigationOptions = {\n  headerTitle: 'Your Cart'\n};\nvar styles = StyleSheet.create({\n  screen: {\n    margin: 20\n  },\n  summary: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n    padding: 10\n  },\n  summaryText: {\n    fontFamily: 'open-sans-bold',\n    fontSize: 18\n  },\n  amount: {\n    color: Colors.primary\n  }\n});\nexport default CartScreen;","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/screens/shop/CartScreen.js"],"names":["React","useState","useSelector","useDispatch","CartItem","cartActions","ordersActions","Card","Colors","CartScreen","props","isLoading","setIsLoading","cartTotalAmount","state","cart","totalAmount","cartItems","transformedCartItems","key","items","push","productId","productTitle","productPrice","quantity","sum","sort","a","b","dispatch","sendOrderHandler","addOrder","styles","screen","summary","summaryText","amount","toFixed","primary","color","accent","length","item","itemData","removeFromCart","navigationOptions","headerTitle","StyleSheet","create","margin","flexDirection","alignItems","justifyContent","marginBottom","padding","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport { View,Text,FlatList,StyleSheet,Button, ActivityIndicator} from 'react-native';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\n\r\nimport CartItem from '../../components/shop/CartItem';\r\nimport * as cartActions from '../../store/actions/cart';\r\nimport * as ordersActions from '../../store/actions/orders';\r\nimport Card from '../../components/UI/Card';\r\nimport Colors from '../../constants/Colors';\r\n\r\n\r\nconst CartScreen = props => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const cartTotalAmount = useSelector(state => state.cart.totalAmount);\r\n    const cartItems = useSelector(state => {\r\n        const transformedCartItems = [];\r\n        for(const key in state.cart.items){\r\n            transformedCartItems.push({\r\n                productId: key,\r\n                productTitle: state.cart.items[key].productTitle,\r\n                productPrice: state.cart.items[key].productPrice,\r\n                quantity: state.cart.items[key].quantity,\r\n                sum: state.cart.items[key].sum,\r\n            })\r\n        }\r\n        return transformedCartItems.sort((a,b) => a.productId > b.productId ? 1 : -1);\r\n        }\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const sendOrderHandler = async () => {\r\n        setIsLoading(true);\r\n        await dispatch(ordersActions.addOrder(cartItems, cartTotalAmount));\r\n        setIsLoading(false);\r\n    }\r\n\r\n    return(\r\n        <View style={styles.screen} >\r\n            <Card style={styles.summary} >\r\n                <Text style={styles.summaryText} >\r\n                    Total: <Text style={styles.amount} >${cartTotalAmount.toFixed(2)}</Text>\r\n                </Text>\r\n                {isLoading ? <ActivityIndicator size=\"small\" color={Colors.primary} /> : <Button \r\n                    style={{color:Colors.accent}} \r\n                    title=\"Order Now\" \r\n                    disabled={cartItems.length === 0}\r\n                    onPress={() =>{} }/>}\r\n            \r\n            </Card>\r\n            <View>\r\n                <FlatList \r\n                    data={cartItems} \r\n                    keyExtractor={item => item.productId}\r\n                    renderItem={itemData => \r\n                        <CartItem \r\n                            quantity={itemData.item.quantity}\r\n                            title={itemData.item.productTitle}\r\n                            amount={itemData.item.sum}\r\n                            deletable\r\n                            onRemove={() => {\r\n                                dispatch(cartActions.removeFromCart(itemData.item.productId));\r\n                            }}\r\n                        />}\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nCartScreen.navigationOptions = {\r\n    headerTitle: 'Your Cart'\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        margin: 20\r\n    },\r\n    summary: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 20,\r\n        padding: 10\r\n    },\r\n    summaryText: {\r\n        fontFamily: 'open-sans-bold',\r\n        fontSize: 18\r\n    },\r\n    amount: {\r\n        color: Colors.primary\r\n    }\r\n});\r\n\r\nexport default CartScreen;"]},"metadata":{},"sourceType":"module"}