{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var LOGOUT = 'LOGOUT';\nvar timer;\nexport var authenticate = function authenticate(userId, token) {\n  return {\n    type: AUTHENTICATE,\n    userId: userId,\n    token: token\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong';\n\n            if (errorId === 'EMAIL_EXISTS') {\n              message = 'This email exists already';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.Json());\n\n          case 13:\n            resData = _context.sent;\n            dispatch(authenticate(resData.localId, resData.idToken));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong';\n\n            if (errorId === 'EMAIL_NOT_FOUND') {\n              message = 'This email could not be found';\n            } else if (errorId === 'INVALID_PASSWORD') {\n              message = 'This password in not valid';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(response.Json());\n\n          case 13:\n            resData = _context2.sent;\n            dispatch(authenticate(resData.localId, resData.idToken));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  ;\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/store/actions/auth.js"],"names":["AUTHENTICATE","LOGOUT","timer","authenticate","userId","token","type","signup","email","password","dispatch","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","Json","resData","localId","idToken","expirationDate","Date","getTime","parseInt","expiresIn","saveDataToStorage","login","logout","clearLogoutTimer","AsyncStorage","removeItem","clearTimeout","setLogoutTimer","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["import {AsyncStorage} from 'react-native';\r\n\r\n// export const SIGNUP = 'SIGNUP';\r\n// export const LOGIN = 'LOGIN';\r\nexport const AUTHENTICATE = 'AUTHENTICATE';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\nlet timer;\r\n\r\nexport const authenticate = (userId, token) => {\r\n    return {type: AUTHENTICATE, userId: userId, token: token}\r\n}\r\n\r\nexport const signup = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc',\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                })\r\n            }\r\n            );\r\n        \r\n        if(!response.ok) {\r\n            const errorResData = await response.json();\r\n            const errorId = errorResData.error.message;\r\n            let message = 'Something went wrong';\r\n            if(errorId === 'EMAIL_EXISTS') {\r\n                message = 'This email exists already';\r\n            }\r\n            throw new Error (message);\r\n        }\r\n        const resData = await response.Json();\r\n        dispatch(authenticate(resData.localId, resData.idToken));\r\n        const expirationDate =new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\r\n        saveDataToStorage(resData.idToken, resData.localId, expirationDate);\r\n    };\r\n};\r\n\r\nexport const login = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc',\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                })\r\n            }\r\n            );\r\n        \r\n            if(!response.ok) {\r\n                const errorResData = await response.json();\r\n                const errorId = errorResData.error.message;\r\n                let message = 'Something went wrong';\r\n                if(errorId === 'EMAIL_NOT_FOUND') {\r\n                    message = 'This email could not be found';\r\n                } else if (errorId === 'INVALID_PASSWORD') {\r\n                    message = 'This password in not valid';\r\n                }\r\n                throw new Error (message);\r\n            }\r\n        const resData = await response.Json();\r\n        dispatch(authenticate(resData.localId, resData.idToken));\r\n        const expirationDate =new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\r\n        saveDataToStorage(resData.idToken, resData.localId, expirationDate);\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    clearLogoutTimer();\r\n    AsyncStorage.removeItem('userData')\r\n    return {type: LOGOUT};\r\n};\r\n\r\nconst clearLogoutTimer = () => {\r\n     if(timer) {\r\n         clearTimeout(timer);\r\n     };\r\n};\r\n\r\nconst setLogoutTimer = expirationTime => {\r\n    return dispatch => {\r\n        timer = setTimeout(() => {\r\n            dispatch(logout());\r\n        }, expirationTime);\r\n    };\r\n};\r\n\r\nconst saveDataToStorage = (token, userId, expirationDate) => {\r\n    AsyncStorage.setItem(\r\n        'userData',\r\n        JSON.stringify({\r\n            token: token,\r\n            userId: userId,\r\n            expiryDate: expirationDate.toISOString()\r\n        })\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}