{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_ORDER, SET_ORDERS } from \"../actions/orders\";\nimport Order from \"../../models/order\";\nvar initialState = {\n  orders: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_ORDERS:\n      return {\n        orders: action.orders\n      };\n\n    case ADD_ORDER:\n      var newOrder = new Order(action.orderData.id, action.orderData.items, action.orderData.amount, action.orderData.date);\n      return _objectSpread({}, state, {\n        orders: state.orders.concat(newOrder)\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/store/reducers/orders.js"],"names":["ADD_ORDER","SET_ORDERS","Order","initialState","orders","state","action","type","newOrder","orderData","id","items","amount","date","concat"],"mappings":";;;;;;AAAA,SAAQA,SAAR,EAAmBC,UAAnB;AACA,OAAOC,KAAP;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAArB;AAIA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,UAAL;AACI,aAAM;AACFG,QAAAA,MAAM,EAAEE,MAAM,CAACF;AADb,OAAN;;AAGJ,SAAKJ,SAAL;AACI,UAAMQ,QAAQ,GAAG,IAAIN,KAAJ,CACbI,MAAM,CAACG,SAAP,CAAiBC,EADJ,EAEbJ,MAAM,CAACG,SAAP,CAAiBE,KAFJ,EAGbL,MAAM,CAACG,SAAP,CAAiBG,MAHJ,EAIbN,MAAM,CAACG,SAAP,CAAiBI,IAJJ,CAAjB;AAMA,+BACOR,KADP;AAEID,QAAAA,MAAM,EAAEC,KAAK,CAACD,MAAN,CAAaU,MAAb,CAAoBN,QAApB;AAFZ;AAZR;;AAiBA,SAAOH,KAAP;AACH,CAnBD","sourcesContent":["import {ADD_ORDER, SET_ORDERS} from '../actions/orders';\r\nimport Order from '../../models/order';\r\n\r\nconst initialState = {\r\n    orders: []\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ORDERS:\r\n            return{\r\n                orders: action.orders\r\n            }\r\n        case ADD_ORDER:\r\n            const newOrder = new Order(\r\n                action.orderData.id, \r\n                action.orderData.items, \r\n                action.orderData.amount, \r\n                action.orderData.date\r\n            );\r\n            return {\r\n                ...state,\r\n                orders: state.orders.concat(newOrder)\r\n            }\r\n    }\r\n    return state;\r\n};"]},"metadata":{},"sourceType":"module"}