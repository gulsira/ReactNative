{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gulsi\\\\Desktop\\\\NodeReact\\\\React Native\\\\the-shop-app\\\\screens\\\\shop\\\\OrdersScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport HeaderButton from \"../../components/UI/HeaderButton\";\nimport OrderItem from \"../../components/shop/OrderItem\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport Colors from \"../../constants/Colors\";\n\nvar OrdersScreen = function OrdersScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var orders = useSelector(function (state) {\n    return state.orders.orders;\n  });\n  var dispatch = useDispatch();\n  useEffect(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            dispatch(ordersActions.fetchOrders()).then(function () {\n              setIsLoading(false);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [dispatch]);\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  ;\n\n  if (orders.length === 0) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, \"No products found, maybe start creating some\"));\n  }\n\n  return React.createElement(FlatList, {\n    data: orders,\n    keyExtractor: function keyExtractor(Item) {\n      return Item.id;\n    },\n    renderItem: function renderItem(itemData) {\n      return React.createElement(OrderItem, {\n        amount: itemData.item.totalAmount,\n        date: itemData.item.readableDate,\n        items: itemData.item.items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  });\n};\n\nOrdersScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Your Orders',\n    headerLeft: function headerLeft() {\n      return React.createElement(HeaderButtons, {\n        HeaderButtonComponent: HeaderButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 26\n        }\n      }, React.createElement(Item, {\n        title: \"Menu\",\n        iconName: Platform.OS === 'android' ? 'md-menu' : 'ios-menu',\n        onPress: function onPress() {\n          navData.navigation.toggleDrawer();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 8\n        }\n      }));\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default OrdersScreen;","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/screens/shop/OrdersScreen.js"],"names":["React","useEffect","useState","useSelector","useDispatch","HeaderButtons","Item","HeaderButton","OrderItem","ordersActions","Colors","OrdersScreen","props","isLoading","setIsLoading","orders","state","dispatch","fetchOrders","then","styles","centered","primary","length","flex","justifyContent","alignItems","id","itemData","item","totalAmount","readableDate","items","navigationOptions","navData","headerTitle","headerLeft","Platform","OS","navigation","toggleDrawer","StyleSheet","create"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react';\r\nimport {Text, FlatList,Platform,ActivityIndicator,View,StyleSheet} from 'react-native';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {HeaderButtons,Item} from 'react-navigation-header-buttons';\r\n\r\nimport HeaderButton from '../../components/UI/HeaderButton';\r\nimport OrderItem from '../../components/shop/OrderItem';\r\nimport * as ordersActions from '../../store/actions/orders';\r\nimport Colors from '../../constants/Colors';\r\n\r\nconst OrdersScreen = props => { \r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const orders = useSelector(state => state.orders.orders);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(async () => {\r\n        setIsLoading(true);\r\n        dispatch(ordersActions.fetchOrders()).then(() => {\r\n            setIsLoading(false);\r\n        });\r\n    }, [dispatch]);\r\n\r\n    if(isLoading) {\r\n        return (\r\n        <View style={styles.centered}>\r\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\r\n        </View>\r\n        );\r\n    };\r\n\r\n    if(orders.length === 0) {\r\n        return (\r\n          <View style={{flex: 1, justifyContent: 'center', alignItems:'center'}}>\r\n            <Text>\r\n              No products found, maybe start creating some\r\n            </Text>\r\n          </View>\r\n        )\r\n      }\r\n\r\n    return (\r\n        <FlatList \r\n            data={orders}\r\n            keyExtractor={Item => Item.id}\r\n            renderItem={itemData =>\r\n                <OrderItem \r\n                    amount={itemData.item.totalAmount}\r\n                    date={itemData.item.readableDate}\r\n                    items={itemData.item.items}\r\n                    /> } />\r\n    )\r\n};\r\n\r\nOrdersScreen.navigationOptions = navData => {\r\n    return{\r\n       headerTitle: 'Your Orders' ,\r\n       headerLeft: () => <HeaderButtons HeaderButtonComponent={HeaderButton}>\r\n       <Item \r\n           title='Menu' \r\n           iconName={Platform.OS === 'android' ? 'md-menu' : 'ios-menu'} \r\n           onPress={() => {\r\n               navData.navigation.toggleDrawer();\r\n           }} />\r\n        </HeaderButtons>,\r\n    }\r\n    \r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    centered: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\n\r\nexport default OrdersScreen;\r\n"]},"metadata":{},"sourceType":"module"}