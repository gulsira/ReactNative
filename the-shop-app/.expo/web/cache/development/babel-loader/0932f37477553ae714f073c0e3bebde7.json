{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Order from \"../../models/order\";\nexport var ADD_ORDER = 'ADD_ORDER';\nexport var SET_ORDERS = 'SET_ORDERS';\nexport var fetchOrders = function fetchOrders() {\n  return function _callee(dispatch, getState) {\n    var userId, response, resData, loadedOrders, key;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userId = getState().auth.userId;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://rn-shop-b1e99.firebaseio.com/orders/\" + userId + \".json\"));\n\n          case 4:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('Something went wrong!');\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            resData = _context.sent;\n            loadedOrders = [];\n\n            for (key in resData) {\n              loadedOrders.push(new Order(key, resData[key].cartItems, resData[key].totalAmount, new Date(resData[key].date)));\n            }\n\n            dispatch({\n              type: SET_ORDERS,\n              orders: loadedOrders\n            });\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 15]], Promise);\n  };\n};\nexport var addOrder = function addOrder(cartItems, totalAmount) {\n  return function _callee2(dispatch, getState) {\n    var token, userId, date, response, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.userId;\n            date = new Date();\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch(\"https://rn-shop-b1e99.firebaseio.com/orders/\" + userId + \".json?auth=\" + token, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                cartItems: cartItems,\n                totalAmount: totalAmount,\n                date: date.toISOString()\n              })\n            }));\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error('Something went wrong');\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            resData = _context2.sent;\n            dispatch({\n              type: ADD_ORDER,\n              orderData: {\n                id: resData.name,\n                items: cartItems,\n                amount: totalAmount,\n                date: date\n              }\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/store/actions/orders.js"],"names":["Order","ADD_ORDER","SET_ORDERS","fetchOrders","dispatch","getState","userId","auth","fetch","response","ok","Error","json","resData","loadedOrders","key","push","cartItems","totalAmount","Date","date","type","orders","addOrder","token","method","headers","body","JSON","stringify","toISOString","orderData","id","name","items","amount"],"mappings":";AAAA,OAAOA,KAAP;AAEA,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,SAAO,iBAAOC,QAAP,EAAgBC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUD,QAAQ,GAAGE,IAAX,CAAgBD,MAD1B;AAAA;AAAA;AAAA,6CAGwBE,KAAK,kDACqBF,MADrB,WAH7B;;AAAA;AAGOG,YAAAA,QAHP;;AAAA,gBAOMA,QAAQ,CAACC,EAPf;AAAA;AAAA;AAAA;;AAAA,kBAQS,IAAIC,KAAJ,CAAU,uBAAV,CART;;AAAA;AAAA;AAAA,6CAWuBF,QAAQ,CAACG,IAAT,EAXvB;;AAAA;AAWOC,YAAAA,OAXP;AAYOC,YAAAA,YAZP,GAYsB,EAZtB;;AAcC,iBAAWC,GAAX,IAAkBF,OAAlB,EAA2B;AACvBC,cAAAA,YAAY,CAACE,IAAb,CACI,IAAIhB,KAAJ,CACIe,GADJ,EAEIF,OAAO,CAACE,GAAD,CAAP,CAAaE,SAFjB,EAGIJ,OAAO,CAACE,GAAD,CAAP,CAAaG,WAHjB,EAII,IAAIC,IAAJ,CAASN,OAAO,CAACE,GAAD,CAAP,CAAaK,IAAtB,CAJJ,CADJ;AAQH;;AACLhB,YAAAA,QAAQ,CAAC;AAACiB,cAAAA,IAAI,EAACnB,UAAN;AAAkBoB,cAAAA,MAAM,EAAER;AAA1B,aAAD,CAAR;AAxBG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA6BH,CA9BM;AAgCP,OAAO,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAACN,SAAD,EAAYC,WAAZ,EAA4B;AAChD,SAAO,kBAAOd,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGmB,YAAAA,KADH,GACWnB,QAAQ,GAAGE,IAAX,CAAgBiB,KAD3B;AAEGlB,YAAAA,MAFH,GAEYD,QAAQ,GAAGE,IAAX,CAAgBD,MAF5B;AAGGc,YAAAA,IAHH,GAGU,IAAID,IAAJ,EAHV;AAAA;AAAA,6CAIoBX,KAAK,kDACqBF,MADrB,mBACyCkB,KADzC,EAExB;AACEC,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFX;AAKEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBZ,gBAAAA,SAAS,EAATA,SADmB;AAEnBC,gBAAAA,WAAW,EAAXA,WAFmB;AAGnBE,gBAAAA,IAAI,EAAEA,IAAI,CAACU,WAAL;AAHa,eAAf;AALR,aAFwB,CAJzB;;AAAA;AAIGrB,YAAAA,QAJH;;AAAA,gBAmBGA,QAAQ,CAACC,EAnBZ;AAAA;AAAA;AAAA;;AAAA,kBAoBS,IAAIC,KAAJ,CAAU,sBAAV,CApBT;;AAAA;AAAA;AAAA,6CAuBmBF,QAAQ,CAACG,IAAT,EAvBnB;;AAAA;AAuBGC,YAAAA,OAvBH;AAyBHT,YAAAA,QAAQ,CAAC;AACTiB,cAAAA,IAAI,EAAEpB,SADG;AAET8B,cAAAA,SAAS,EAAE;AAACC,gBAAAA,EAAE,EAAEnB,OAAO,CAACoB,IAAb;AAAmBC,gBAAAA,KAAK,EAAEjB,SAA1B;AAAqCkB,gBAAAA,MAAM,EAAEjB,WAA7C;AAA0DE,gBAAAA,IAAI,EAAEA;AAAhE;AAFF,aAAD,CAAR;;AAzBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA8BH,CA/BM","sourcesContent":["import Order from '../../models/order';\r\n\r\nexport const ADD_ORDER = 'ADD_ORDER';\r\nexport const SET_ORDERS = 'SET_ORDERS';\r\n\r\nexport const fetchOrders = () => {\r\n    return async (dispatch,getState) => {\r\n      const userId = getState().auth.userId;\r\n        try {\r\n            const response = await fetch(\r\n              `https://rn-shop-b1e99.firebaseio.com/orders/${userId}.json`\r\n            );\r\n      \r\n            if (!response.ok) {\r\n              throw new Error('Something went wrong!');\r\n            }\r\n      \r\n            const resData = await response.json();\r\n            const loadedOrders = [];\r\n      \r\n            for (const key in resData) {\r\n                loadedOrders.push(\r\n                    new Order(\r\n                        key, \r\n                        resData[key].cartItems, \r\n                        resData[key].totalAmount, \r\n                        new Date(resData[key].date)\r\n                    )\r\n              );\r\n            }\r\n        dispatch({type:SET_ORDERS, orders: loadedOrders });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n};\r\n\r\nexport const addOrder = (cartItems, totalAmount) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        const userId = getState().auth.userId;\r\n        const date = new Date();\r\n        const response = await fetch(\r\n          `https://rn-shop-b1e99.firebaseio.com/orders/${userId}.json?auth=${token}`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                cartItems,\r\n                totalAmount,\r\n                date: date.toISOString()\r\n              })\r\n            }\r\n          );\r\n\r\n          if(!response.ok) {\r\n              throw new Error('Something went wrong');\r\n          }\r\n      \r\n        const resData = await response.json();\r\n\r\n        dispatch({\r\n        type: ADD_ORDER, \r\n        orderData: {id: resData.name, items: cartItems, amount: totalAmount, date: date}\r\n        });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}