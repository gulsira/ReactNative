{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var SIGNUP = 'SIGNUP';\nexport var LOGIN = 'LOGIN';\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, resDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Something went wrong');\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.Json());\n\n          case 7:\n            resDate = _context.sent;\n            dispatch({\n              type: SIGNUP\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, resDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new Error('Something went wrong');\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(response.Json());\n\n          case 7:\n            resDate = _context2.sent;\n            dispatch({\n              type: LOGIN\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/gulsi/Desktop/NodeReact/React Native/the-shop-app/store/actions/auth.js"],"names":["SIGNUP","LOGIN","signup","email","password","dispatch","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","Error","Json","resDate","type","login"],"mappings":";AAAA,OAAO,IAAMA,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACvC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBC,KAAK,CACxB,uGADwB,EAExB;AACIC,cAAAA,MAAM,EAAE,MADZ;AAEIC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFb;AAKIC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,gBAAAA,KAAK,EAAEA,KADU;AAEjBC,gBAAAA,QAAQ,EAAEA,QAFO;AAGjBQ,gBAAAA,iBAAiB,EAAE;AAHF,eAAf;AALV,aAFwB,CADzB;;AAAA;AACGC,YAAAA,QADH;;AAAA,gBAgBCA,QAAQ,CAACC,EAhBV;AAAA;AAAA;AAAA;;AAAA,kBAiBO,IAAIC,KAAJ,CAAU,sBAAV,CAjBP;;AAAA;AAAA;AAAA,6CAmBmBF,QAAQ,CAACG,IAAT,EAnBnB;;AAAA;AAmBGC,YAAAA,OAnBH;AAoBHZ,YAAAA,QAAQ,CAAC;AAAEa,cAAAA,IAAI,EAAElB;AAAR,aAAD,CAAR;;AApBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAsBH,CAvBM;AAyBP,OAAO,IAAMmB,KAAK,GAAG,SAARA,KAAQ,CAAChB,KAAD,EAAQC,QAAR,EAAqB;AACtC,SAAO,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBC,KAAK,CACxB,mHADwB,EAExB;AACIC,cAAAA,MAAM,EAAE,MADZ;AAEIC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFb;AAKIC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,gBAAAA,KAAK,EAAEA,KADU;AAEjBC,gBAAAA,QAAQ,EAAEA,QAFO;AAGjBQ,gBAAAA,iBAAiB,EAAE;AAHF,eAAf;AALV,aAFwB,CADzB;;AAAA;AACGC,YAAAA,QADH;;AAAA,gBAgBCA,QAAQ,CAACC,EAhBV;AAAA;AAAA;AAAA;;AAAA,kBAiBO,IAAIC,KAAJ,CAAU,sBAAV,CAjBP;;AAAA;AAAA;AAAA,6CAmBmBF,QAAQ,CAACG,IAAT,EAnBnB;;AAAA;AAmBGC,YAAAA,OAnBH;AAoBHZ,YAAAA,QAAQ,CAAC;AAAEa,cAAAA,IAAI,EAAEjB;AAAR,aAAD,CAAR;;AApBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAsBH,CAvBM","sourcesContent":["export const SIGNUP = 'SIGNUP';\r\nexport const LOGIN = 'LOGIN';\r\n\r\nexport const signup = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc',\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                })\r\n            }\r\n            );\r\n        \r\n        if(!response.ok) {\r\n            throw new Error('Something went wrong');\r\n        }\r\n        const resDate = await response.Json();\r\n        dispatch({ type: SIGNUP });\r\n    };\r\n};\r\n\r\nexport const login = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC1nLEcVJuHxtRPHEvpK93LRXSyStpWkFc',\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    returnSecureToken: true\r\n                })\r\n            }\r\n            );\r\n        \r\n        if(!response.ok) {\r\n            throw new Error('Something went wrong');\r\n        }\r\n        const resDate = await response.Json();\r\n        dispatch({ type: LOGIN });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}